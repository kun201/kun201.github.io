{"pages":[{"title":"关于","text":"本博客内容全部来自互联网，完全复制粘贴。看帖者请于24小时内自觉、主动、完全忘记。跟帖行为并不意味本人同意、支持、反对，或了解、知晓文中观点，如有任何疑问请直接联系原作者本人。故本人不对以上内容负法律责任（包括民法、刑法或婚姻法，及文中提及或未提及之法律），请勿跨村、跨乡、跨县、跨市、跨省、跨国、跨地球、跨银河系抓捕。谢谢合作！","link":"/about/index.html"},{"title":"网站历程","text":"2018年12月1日：网站正式开通 2018年12月7日：发表第一篇博客 2018年12月19日：添加LiveRe评论插件","link":"/history/index.html"},{"title":"正在读的书...","text":"《Kubernetes权威指南·纪念版》&emsp;&emsp;学习K8S的相关的知识，但是看到版本是1.6，总有种49年入国军的感觉。&emsp;&emsp;2019年3月至今。 《三体》系列几年前看过电子版的，因最近流浪地球的大火，大刘和他的作品开始逐渐为大多数人所知。加上知乎日益增多的三体话题，引起了我对三体的回忆，于是在京东买了一套纪念版，供收藏及打发时间。注：以下时间针对实体书版本，读多次也会记录在此。《三体》&emsp;&emsp;2019年3月18日，花了大概5个小时左右读完，话说这本书这么短的吗？《三体II·黑暗森林》&emsp;&emsp;还未读。《三体Ⅲ·死神永生》&emsp;&emsp;还未读。 《鸟哥的Linux私房菜》&emsp;&emsp;学习Linux的基础知识，对我的帮助真的很大。&emsp;&emsp;2018年11月至今。","link":"/reading/index.html"}],"posts":[{"title":"学习awk和printf的小粗心事件记录","text":"&emsp;&emsp;今天在学习学习使用printf和awk时候碰到了一个小问题，执行一段命令一直出错，该段命令如下：1234567cat pay.txt | \\ awk &apos;NR==1{printf &quot;%10s %10s %10s %10s %10s\\n&quot;,$1,$2,$3,$4,&quot;Total&quot;} \\NR&gt;1{total=$2+$3+$4 \\printf &quot;%10s %10d %10d %10d %10.2f\\n&quot;,$1,$2,$3,$4,total}&apos;#以上是代码，以下是报错信息awk: cmd. line:3: printf &quot;%10s %10d %10d %10d %10.2f\\n&quot;,$1,$2,$3,$4,total}awk: cmd. line:3: ^ syntax error &emsp;&emsp;不知道看到这里的朋友是不是能快速的发现问题所在，如果不能的话，那么就请继续看接下来的内容。&emsp;&emsp;所有awk的操作，亦即在{}内的操作，如果有需要多个命令辅助时，可利用分号【;】间隔，或直接以【Enter】按键来隔开每个命令。也就是说’printf “%10s…’的上面那段不能以【\\】结尾，因为shell会将其认为是同一行的代码，解决方案就是去掉结尾的【\\】直接换行，或者将【\\】结尾改为【;\\】结尾，正确的方式如下：1234567891011#方式一：去掉【\\】直接进行换行cat pay.txt | \\ awk &apos;NR==1{printf &quot;%10s %10s %10s %10s %10s\\n&quot;,$1,$2,$3,$4,&quot;Total&quot;} \\NR&gt;1{total=$2+$3+$4 #已经去掉了之前的【\\】printf &quot;%10s %10d %10d %10d %10.2f\\n&quot;,$1,$2,$3,$4,total}&apos;#方式二：将【\\】结尾改为【;\\】结尾cat pay.txt | \\ awk &apos;NR==1{printf &quot;%10s %10s %10s %10s %10s\\n&quot;,$1,$2,$3,$4,&quot;Total&quot;} \\NR&gt;1{total=$2+$3+$4; \\ #在【\\】前面添加一个分号printf &quot;%10s %10d %10d %10d %10.2f\\n&quot;,$1,$2,$3,$4,total}&apos; &emsp;&emsp;这样shell就可以正确的执行啦，希望大家不要像我一样，被这样的小问题给耽误了足足十几分钟(以为是代码写错了，不断地重复敲击)。没办法，我就是这样一个追根刨底的人，但是却没有向前看(因为就在这个小练习的下面一点就有说明…)。所以我将这个记录下来，也是希望我以后能够时刻谨记，要细心、往长远的看，同时我也希望同样碰到这个问题的朋友，能够快速的找到问题所在。 参考《鸟哥的Linux私房菜》","link":"/2018/12/20/学习awk和printf的小粗心/"},{"title":"第一篇博客","text":"写在前面&emsp;&emsp;关于写博客这件事情，很久以前我就有这个意向了，当时是因为觉得潮、好玩，在朋友面前炫耀，接着自己就注册博客账号，开始学着热门的博主学习写博客。轮到自己动笔的时候发现就不是这回事了，自己写的内容杂乱、毫无逻辑性，写作水平很差（现在依旧如此，囧~），完全不是自己想象中的点击量与关注度。于是乎在失去了最初的热情后，慢慢的就忘记了写博客这件事情。 &emsp;&emsp;开始工作以后，经常要接触、学习新的技术，但这些新的技术我仅是在学习与使用的时候还比较熟悉，完成一个项目后就几乎没有再用到当时学习的一些技术，随着时间慢慢的淡忘。看着自己曾经努力学习的技术慢慢的丢掉，有时候我也会怀疑自己努力的结果是否值得？但是我的内心明白，值得，我需要换一个方式。真正让我下定决心写博客，是在前一段时间，我负责维护的服务器出现了一个小故障，因为这个故障导致服务长时间无法正常工作。 选择GitHubPages + Hexo部署&emsp;&emsp;接着我便开始了自己的博客计划，我需要根据以下几点来搭建博客：&emsp;&emsp;&emsp;&emsp;- 独立的服务器、独立的域名访问&emsp;&emsp;&emsp;&emsp;- 还需要选择的就是所用的博客系统（不打算自己开发）&emsp;&emsp;&emsp;&emsp;- 博客系统所使用的技术，数据库、不用数据库，前端技术，后端技术&emsp;&emsp;以上差不多就是所有需求了，服务器进行购买，域名也备案完成后，就等我最后选择博客系统了。我先在GitHub、开源中国上面开源的博客系统，挑选了个别看得顺眼的进行部署，使用一段时间后发现尽不如意，放弃之。接着就了解到了GitHub Pages，GitHub 我就不多做介绍了，想必能看到我这篇博客的人都会相当的熟悉,我就说一下个人的见解。GitHub Pages：是GitHub上的一个功能，令你的仓库文件可以直接通过互联网的访问展示，只需要编辑、推送后立即生效，就是一个静态服务器。只能说是一个超大号的福利，一次性解决了需要建立博客的朋友大部分问题：&emsp;&emsp;&emsp;&emsp;1.服务器问题，带宽、空间、运维(技术与金钱)&emsp;&emsp;&emsp;&emsp;2.域名问题(备案)&emsp;&emsp;&emsp;&emsp;3.博客的选择问题(没得选) &emsp;&emsp;经过一系列的挑选，最终选择了快速、简洁且个高效的博客框架：Hexo，以及非常好看的博客主题icarus。只需要编辑MarkDown文本，就可以有加载成美丽的Html界面，真的是很轻松、惬意。 结束语&emsp;&emsp;发现自己并不善于写博客，以后就不勉强自己了，随便写写个人日志类就算了…&emsp;&emsp;另外，本篇博客使用的图片摘自网络，本人不了解任何有关于此图片的信息，所有解释权归图片原作者所有，如有侵权或是违反相关相关法律法规，请联系本人删除！","link":"/2018/12/07/第一篇博客/"},{"title":"jenkins-pipeline记录","text":"前言因为项目需求，现需学习持续集成相关技术，多次权衡以后，决定使用jenkins实现功能。关于jenkins的介绍我就不多说了，能看到这篇博客的人都应该有所了解，就算没听过相信各位对搜索引擎的使用也是非常熟练。 项目结构这是一个模拟Maven多模块的项目，暂时就只有一个子模块，不用纠结是否为真正的‘多’模块。 &emsp;&emsp;back_end (父级)&emsp;&emsp;&emsp;&emsp;一pom.xml&emsp;&emsp;&emsp;&emsp;一back_end_web (Web层)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;一pom.xml 此时项目内已经有了几个接口以供测试，因重点不在这上面，这部分就结束了。 创建jenkins pipelin项目假定你已经安装了jenkins，也将Maven代码上传到Git进行管理，接下来我们就要利用jenkins来创建一个从Git版本库来下载代码并自动打包、部署测试的 创建项目点击主页面右上角的New 任务来进入创建界面，然后输入你的项目名，选择流水线项目，点击OK来完成创建。 配置项目直接点击最上方的Pipeline进行流水线的设置，其它的配置暂时先不管。1.直接点解Pipeline进入流水线的设置，其它的可以先不管;2.点击下拉框选择Pipeline script from SCM;3.点击下拉框选择Git，因为我使用的是Git来管理项目代码，可以视情况选择;4.设置Git版本库的路径，为了方便测试我设置为本地仓库的绝对路径，也就是Git clone后存储位置的绝对路径，和填网络版本库地址的效果是一样的，只是可以不做push这个操作，节省时间。注：如果是用容器启动的jenkins，一定要将代码所在的目录在jenkins容器内做个映射，这样jenkins才能取得你的代码，待会儿我给的参考链接里有详细教程；5.设置要操作的分支，默认是master分支，视情况选择；6.设置流水线脚本的路径，填写在你项目里的相对路径。最后点击保存以后，就完成了简单的项目配置。 编辑流水线脚本和自动化构建脚本编辑pipelin的运行脚本首先，我们先编辑Pipeline的脚本文件，名字和路径一定要和上面第六步对应，脚本内容如下。请注意，以下注释只是我为了方便理解，请不要在需要运行的脚本内这样写。123456789101112131415161718192021pipeline { agent any stages { stage(&apos;Build Tests&apos;) { agent { docker { image &apos;maven:3.6-alpine&apos; args &apos;-v /work/jenkins/root/.m2:/root/.m2 --link mysql:mysql&apos; #这里是启动容器时的参数，第二个link是因为连接数据库碰到了一个bug，稍后再解释 } } steps { sh &apos;./jenkins/scripts/tests.sh&apos; #执行打包和测试脚本 } } stage(&apos;Deploy&apos;) { steps { sh &apos;./jenkins/scripts/deploy.sh&apos; #执行部署脚本 } } }} -v /work/jenkins/root/.m2:/root/.m2：为了让Maven仓库得到保存，方便下一次构建。–link mysql:mysql：将name为mysql的容器链接起来，并给予别名为mysql，为什么要这样做？mysql和java服务运行在同一个物理机不同的两个容器内，因此通信的方式可以通过上述link的链接方式，以及访问物理机IP地址的方式来进行连接。我首先使用的是用IP地址的方式来访问，结果在启动时连接MySQL数据库，日志打印出了这样的一个错误：Communications link failure。这个问题我在网络上搜索了很久，有3种解决方案，数据库连接URL增加参数、修改MySQL数据库的等待时间、修改URL请求的地址为localhost。很明显，以上3种方案都不适合我，我在其它物理机上是可以正常连接的，而且我们碰到问题时机器的环境不同。最终我只能改用docker运行时创建别名的方式，连接地址直接填写MySQL数据库的的别名，其实我不是很喜欢这种方式，增加耦合度，不便部署。如果有碰到这种情况的，也可以将你的解决方式在下面回复我，我还在寻找产生这样问题的原因。 编辑tests.sh现在要编辑执行打包、测试功能的脚本了。1234567891011121314151617181920#!/usr/bin/env bash#Just a Tests shell script#2019/3/4 kun First release#日志文件路径LOGFILE=&quot;./start.log&quot;#Springboot项目启动成功时日志会有&apos;Server Started&apos;输出，以此来检测是否成功启动START=&apos;Server Started&apos;#执行打包操作mvn -B -DskipTests package#后台启动项目，并且将日志输入到指定文件，以检查是否成功启动java -jar back_end_web/target/*.jar &gt;&quot;${LOGFILE}&quot; &amp;sleep 30 #等待30秒，项目启动比较费时cat &quot;${LOGFILE}&quot; #将日志输出，方便我在Jenkins控制台查看结果#判断是否正常启动，否则退出本次脚本grep &quot;${START}&quot; ${LOGFILE} &amp;&amp; echo &quot;${START}&quot; || exit 1#将jar包移动到指定的工作目录，方便我在接下来的deploy脚本内进行构建docker容器操作cp back_end_web/target/*.jar /home/git/back_end/ 编辑deploy.sh1234567891011121314151617181920#!/usr/bin/env bash#Just a Deploy shell script#2019/3/4 Kun First releasecd /home/git/back_end/ #进入工作目录#取得jar包的名称JARNAME=&quot;$(ls ./*.jar | awk &apos;NR==1{print $1}&apos;)&quot;#取出版本号，稍后image将以jar版本号作为标签，区分每个版本的imageVERSION=${JARNAME#*-} &amp;&amp; VERSION=${VERSION%-*}IMAGENAME=&quot;pipixia:${VERSION}&quot;#构建docker镜像，构建完成后删除jar包docker build -t ${IMAGENAME} . &amp;&amp; rm ${JARNAME}#检查是否已经有名为&apos;pipixia&apos;的容器在运行中，如果有就将其干掉docker ps -a | grep &apos;pipixia&apos; &amp;&amp; docker stop pipixia &amp;&amp; docker rm pipixia#启动刚刚构建完成的容器，link的原因我已经说过了，就不再赘述了，而卷映射只是我的需求，各位可以试实际情况来操作docker run -d -p 8080:8080 -v /work/pipixia/upload:/upload --link mysql:mysql --name pipixia ${IMAGENAME} 编辑Dockerfile123456789101112FROM openjdk:8-jdk-alpineMAINTAINER &quot;kun@kungege.cn&quot;#设置时区RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN echo &apos;Asia/Shanghai&apos; &gt;/etc/timezone#将打包好的脚本复制到指定目录COPY ./*.jar /jar/pipixia.jar#启动命令CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/jar/pipixia.jar&quot;] 测试运行接下来就到了检验结果的时候了，手动点击立即构建，测试一下能否正常跑起来，成功后的结果应该如图，碰到什么问题可以在下面留言。 自动部署通过了上面的步骤，此时我们的pipeline已经可以正常工作了，但是不可能每次都手动去构建，这时候只需要在jenkins的项目内设置一下。首先在创建pipeline项目的第4步，将版本库的地址更改为网络地址，将分支更改为需要自动部署的分支。然后设置轮询SCM的方案，每10分钟自动检查一次版本库是否更新，因为我使用的是GitBlit，不支持推送后发送提醒到Jenkins(也许是我没找到相关文档)。GitHub和GitLab用户可以使用更智能的方法，更新后给Jenkins主动发送信号。完成了以上操作，再随意将项目更新一点东西，并提交测试，等待10分钟内，就会发现Jenkins自动完成了一次构建，这时候算是完成了一个简单持续集成项目。 结尾&amp;参考链接时隔3个多月，又一次写了博客，记录一下工作时使用的技术，免得过段时间又忘记了。一天天的，有时候都不知道自己究竟在做什么啊，唉，人生啊！纵观全文，一些解决问题的方式可能太过低级，需要更优雅的方式，大家路过了还希望能够留下一些自己的意见，谢谢！ 参考链接1.使用Maven构建Java程序：来自Jenkins官网，如果你去看过，就会发现我上面步骤基本是照着这个教程修改。2.Jenkins流水线：了解pipeline相关的概念以及语法。3.Jenkins语法-多个stage关系:顺序和并行和pipeline使用之语法详解：我从中得到了什么？这都忘了…我是不是不太适合干这一行了？？4.使用Jenkins来构建Docker容器：参考了一些想法。","link":"/2019/03/07/jenkins-pipeline记录/"},{"title":"vi/vim学习记录","text":"随便说几句&emsp;&emsp;在Linux上，有着各式各样的文本编辑器，为什么非要学习vi/vim呢？原因无外乎有以下几点：&emsp;&emsp;&emsp;&emsp;- 所有的UNIK-like系统都会内置vi文本编辑器，其它的不一定存在；&emsp;&emsp;&emsp;&emsp;- 很多软件的编辑借口都会主动调用vi（crontab、visudo、edquota等）；&emsp;&emsp;&emsp;&emsp;- vim具有程序编辑的能力，可以主动地通过自体颜色来辨别语法的正确性；&emsp;&emsp;&emsp;&emsp;- 程序简单，编辑速度很快。&emsp;&emsp;也就是说，不论如何你都能在Linux上使用到vi编辑器，而不会因为更换了一个系统，又要重新学习编辑器的使用。不会使用vi，那么很多命令根本无法操作（crontab、visudo、edquota），所以不管怎样，都需要学习vi编辑器。 vi/vim按键说明以下是大部分vi/vim的按键说明表 第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等 移动光标的方法 h 或 向左箭头键(←) 光标向左移动一个字符 j 或 向下箭头键(↓) 光标向下移动一个字符 k 或 向上箭头键(↑) 光标向上移动一个字符 l 或 向右箭头键(→) 光标向右移动一个字符 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键，亦即加上想要进行的次数(数字)后，按下动作即可！ [Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) [Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 + 光标移动到非空格符的下一行 - 光标移动到非空格符的上一行 n 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。 0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用) $ 或功能键[End] 移动到这一行的最后面字符处(常用) H 光标移动到这个屏幕的最上方那一行的第一个字符 M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个档案的最后一行(常用) nG n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) gg 移动到这个档案的第一行，相当于 1G 啊！ (常用) n n 为数字。光标向下移动 n 行(常用) 搜索替换 /word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 kun 这个字符串，就输入 /kun 即可！ (常用) ?word 向光标之上寻找一个字符串名称为 word 的字符串。 n 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /kun 去向下搜寻 kun 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 kun 的字符串。如果是执行 ?kun 的话，那么按下 n 则会向上继续搜寻名称为 kun 的字符串！ N 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /kun 后，按下 N 则表示『向上』搜寻 kun 。 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ :n1,n2s/word1/word2/g n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 kun 并取代为 KUN 则：『:100,200s/kun/KUN/g』。(常用) :1,$s/word1/word2/g 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) :1,$s/word1/word2/gc 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) 删除、复制与贴上 x, X 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 dd 删除游标所在的那一整行(常用) ndd n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用) d1G 删除光标所在到第一行的所有数据 dG 删除光标所在到最后一行的所有数据 d$ 删除游标所在处，到该行的最后一个字符 d0 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 yy 复制游标所在的那一行(常用) nyy n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用) y1G 复制游标所在行到第一行的所有数据 yG 复制游标所在行到最后一行的所有数据 y0 复制光标所在的那个字符到该行行首的所有数据 y$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) J 将光标所在行与下一行的数据结合成同一行 c 重复删除多个数据，例如向下删除 10 行，[ 10cj ] u 复原前一个动作。(常用) [Ctrl]+r 重做上一个动作。(常用) 这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！ . 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) 第二部份：一般模式切换到编辑模式的可用的按钮说明 进入输入或取代的编辑模式 i, I 进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用) a, A 进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) o, O 进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用) r, R 进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) 上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！ [Esc] 退出编辑模式，回到一般模式中(常用) 第三部份：一般模式切换到指令行模式的可用的按钮说明 指令行的储存、离开等指令 :w 将编辑的数据写入硬盘档案中(常用) :w! 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ :q 离开 vi (常用) :q! 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ :wq 储存后离开，若为 :wq! 则为强制储存后离开 (常用) ZZ 这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！ :w [filename] 将编辑的数据储存成另一个档案（类似另存新档） :r [filename] 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 :n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个档案。 :! command 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如：『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！ vim 环境的变更 :set nu 显示行号，设定之后，会在每一行的前缀显示该行的行号 :set nonu 与 set nu 相反，为取消行号！ &emsp;&emsp;特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。 基础用法小练习&emsp;&emsp;为了能够良好的应用所学，于是我将鸟叔的在该章节的小练习记录在这里，有空的时候来进行练习。由于鸟叔官网上的繁中不便于阅读，所以我打一份简中的在这里。接下来的操作都是用CentOS7.4的man_db.conf来做练习，可以在鸟哥的官网下载123456789101112131415请在/tmp这个目录下建立一个名为test的目录；进入test目录；将/etc/man_db.conf（如果你是通过上述链接下载那么就复制下载后的文件)复制到当前目录；使用vi打开本目录下的man_db.conf文件；在vi中设置一下行号；移动到第43行，向右移动59个字符，请问你看到的小括号内是哪几个文字？移动到第一行，并且向下查找【gzip】这个字符串，请问它在第几行？接着下来，将29到41行之间的【小写man】修改为【大写MAN】，并且询问是否修改，如何操作？结果出现改变了几个man？修改完之后，突然反悔了，恢复有几种方法？复制66到71这6行内的内容（含有MANDB_MAP），并且粘贴到最后一行后；删除113到128行之间开头为#符号的注释数据；将当前修改完的文件保存为man.test.config文件；在第25行，删除15个字符，结果出现的第一个字符是什么？在第一行新增一行，该内容输入【I am a student...】；保存退出。 &emsp;&emsp;如果你编辑的是上面所说的文件，那么下面的就是正确答案及步骤：123456789101112131415【mkdir /tmp/test】【cd /tmp/test】【cp /etc/man_db.conf .】(或者是复制你自己的下载的文件到当前目录)【/bin/vi man_db.conf】【:set nu】就可以看见左侧显示了行号【43G】到43行，【59空格】按下59+空格即可向右移动59个字符，显示as这个字符在小括号内。【1G】或【gg】到第一行，输入【/gzip】，会去到93行才对。直接执行【:29,41s/man/MAN/gc】将会在29和41行间替换man为MAN，加上c让用户确认替换，一直按【y】最终会完成【13次替换，共13行】。一直按【u】恢复，或者【:q!】不保存且退出，再重新打开该文件。【66G】然后再【6yy】之后最下面的提示栏会出现【复制了6行】(提示内容视你系统的语言而定)，按下【G】到最后一行再按【p】换行粘贴。因为113-128共16行，因此【113G】然后【16dd】就能删除113-128行的内容，此时光标所在的行变成了【Flags】开头。【:w man.test.config】，你会发现最下方的状态栏显示“man.test.config&quot; [NEW]..的字样。【25G】之后，再按下【15x】即可删除15个字符，出现【tree】字样。先【1G】到第一行，然后按下大写的【O】会在上面新增一行且进入编辑模式；接着你要输入的字符串，按下【Esc】退出编辑模式。【:wq】。 &emsp;&emsp;如果结果和上面的一样，那么基本上的操作都没有什么问题了，剩下的只需要多多打字练习。 vi/vim键位图 参考&emsp;&emsp;《鸟哥的Linux私房菜》、菜鸟教程","link":"/2018/12/13/vi-vim学习记录/"}],"tags":[{"name":"随笔","slug":"随笔","link":"/tags/随笔/"},{"name":"粗心的我","slug":"粗心的我","link":"/tags/粗心的我/"},{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"vi/vim编辑器","slug":"vi-vim编辑器","link":"/tags/vi-vim编辑器/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"随笔","slug":"随笔","link":"/categories/随笔/"},{"name":"数据操作","slug":"Linux/数据操作","link":"/categories/Linux/数据操作/"},{"name":"运维","slug":"运维","link":"/categories/运维/"}]}